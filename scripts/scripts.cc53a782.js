"use strict";!function(a){window.LifeApp=window.LifeApp||{},window.LifeApp.Grid=window.LifeApp.Grid||{},window.LifeApp.Cell=a()}(function(){var a=function(a,b,c,d){this.neighbours=a,this.alive=b,this.nextState=c,this.style=d};a.prototype.clone=function(){return new a(this.neighbours,this.alive,this.nextState,this.style)};var b=function(b,c,d){this.display=new a(0,d,d,"none"),this.x=b,this.y=c,this.alive=d,this.neighbours=0,this.previous=[],this.following=[]};return b.prototype={reset:function(a){this.alive=!!a,this.previous=[],this.following=[],this.neighbours=0,this.display.alive=!!a,this.display.nextState=!!a,this.display.neighbours=0,this.display.style="none"},stepBack:function(){this.following.push(this.display),this.display=this.previous.pop()},stepForward:function(){this.previous.push(this.display),this.display=this.following.pop()},invertState:function(){this.display.alive=!this.display.alive},getNextState:function(){var a=this.alive&&this.neighbours>1&&this.neighbours<4||!this.alive&&3===this.neighbours;this.alive!==a?(this.display.style=a?"overline":"line-through",b.prototype.colonyChanged=!0):this.display.style="none",this.display.neighbours=this.neighbours,this.display.alive=this.alive,this.display.nextState=a,this.alive=a,this.neighbours=0},liveOrDie:function(){var a=this.display.clone();this.previous.length>b.historyLimit&&this.previous.shift(),this.previous.push(a),this.getNextState()}},b.Display=a,b}),function(a){window.LifeApp=window.LifeApp||{},window.LifeApp.Grid=a(window.LifeApp)}(function(a){var b=function(a,b,c){this.x=a,this.y=b,this.cells=new Array(a),this.sparseFactor=c;for(var d=0;b>d;d++)this.cells[d]=this.createRow(d)},c=a.Cell;return b.prototype={createRow:function(a){for(var b=new Array(this.x),d=0;d<this.x;d++)b[d]=new c(d,a,!1);return b},getCell:function(a,b){return this.cells[b][a]},setCell:function(a,b,c){this.cells[b][a].alive=c},map:function(a,b){b=b||[],this.cells.map(function(c){c.map(function(c){a.apply(c,b)})})},setBlankState:function(){this.map(c.prototype.reset,[!1])},setRandomState:function(){var a=new Uint8Array(this.x*this.y);window.crypto.getRandomValues(a);for(var b=0,c=0;b<this.y;b++)for(var d=0;d<this.x;d++,c++)this.cells[b][d].reset(a[c]<this.sparseFactor)},addCol:function(){this.x++,this.cells.forEach(function(a,b){a.push(new c(this.x,b,!1))},this)},removeCol:function(){this.x--,this.cells.forEach(function(a){a.pop()})},addRow:function(){this.y++,this.cells.push(this.createRow(this.y))},removeRow:function(){this.y--,this.cells.pop()},fromJson:function(a){a.forEach(function(a){this.getCell(a[0],a[1]).reset(!0)},this)},toJson:function(){return this.cells.reduce(function(a,b){return b.reduce(function(a,b){return b.display.alive&&a.push([b.x,b.y]),a},a)},[])}},b}),function(a){window.LifeApp=window.LifeApp||{},window.LifeApp.Life=a(window.LifeApp)}(function(a){var b=function(a){this.grid=a,this.numTicks=0},c=a.Cell;return b.historyLimit=100,c.historyLimit=b.historyLimit,b.prototype={colonyStable:function(){return!c.prototype.colonyChanged},historyStatus:function(){var a=this.grid.getCell(0,0);return{back:a.previous.length,forward:a.following.length}},setRandomState:function(){this.numTicks=0,this.grid.setRandomState()},setBlankState:function(){this.numTicks=0,this.grid.setBlankState()},setGosper:function(){this.numTicks=0,this.grid.fromJson(a.patterns.gosper)},stepBack:function(){this.historyStatus().back&&(this.grid.map(c.prototype.stepBack),this.numTicks--)},preStep:function(){this.step(c.prototype.getNextState)},stepForward:function(){this.historyStatus().forward?this.grid.map(c.prototype.stepForward):this.step(c.prototype.liveOrDie),this.numTicks++},cellClick:function(a){a.invertState(),this.grid.map(function(){this.following=[],this.alive=this.display.alive}),this.preStep()},step:function(a){var b=function(b,c){var d=b.aboveRow.shift(),e=b.aboveLeft,f=b.left;return b.aboveLeft=d,b.left=c,e.neighbours+=c.alive+d.alive+f.alive,f.neighbours+=e.alive+d.alive,d.neighbours+=f.alive+e.alive,c.neighbours+=e.alive,a.call(e),b},d=function(c,d){var e=d.slice(),f=c.slice(),g={aboveLeft:f.shift(),aboveRow:f,left:e.shift()},h=e.reduce(b,g);return h.aboveLeft.neighbours+=h.left.alive,h.left.neighbours+=h.aboveLeft.alive,a.call(h.aboveLeft),d};c.prototype.colonyChanged=!1;var e=this.grid.cells.slice(),f=e.shift(),g=e.reduce(d,f),h=g.slice(),i=h.shift(),j=h.reduce(function(b,c){return c.neighbours+=b.alive,b.neighbours+=c.alive,a.call(b),c},i);a.call(j)}},b}),function(){window.LifeApp=window.LifeApp||{},window.LifeApp.patterns={},window.LifeApp.patterns.gosper=[[26,3],[24,4],[26,4],[14,5],[15,5],[22,5],[23,5],[36,5],[37,5],[13,6],[17,6],[22,6],[23,6],[36,6],[37,6],[2,7],[3,7],[12,7],[18,7],[22,7],[23,7],[2,8],[3,8],[12,8],[16,8],[18,8],[19,8],[24,8],[26,8],[12,9],[18,9],[26,9],[13,10],[17,10],[14,11],[15,11]]}(),angular.module("gameOfLifeApp",[]).service("Life",function(){return window.LifeApp.Life}).service("Grid",function(){return window.LifeApp.Grid}),angular.module("gameOfLifeApp").controller("MainCtrl",["Life","Grid","$scope",function(a,b,c){var d=new b(40,40,50),e=new a(d),f={stop:function(){return c.timer?(clearInterval(c.timer),c.timer=null,!1):!0},start:function(){c.timer=setInterval(function(){e.stepForward(),e.colonyStable()&&(clearInterval(c.timer),c.timer=null),c.$apply()},1e3/c.speed)},startStop:function(){c.stop()&&c.start()},speedChange:function(){c.speed>0&&c.timer&&(c.stop(),c.start())},stepForward:function(){c.stop(),e.stepForward()},stepBack:function(){c.stop(),e.stepBack()},cellClick:function(a){c.stop(),e.cellClick(a)},random:function(){c.stop(),e.setRandomState(),e.preStep()},blank:function(){c.stop(),e.setBlankState()},gosper:function(){c.stop(),e.setGosper()}},g={speed:5,cellSize:15,displayNeighbours:!1,grid:d,life:e};angular.extend(c,f,g),e.preStep()}]),angular.module("gameOfLifeApp").run(["$templateCache",function(a){a.put("views/main.html",'<div id="grid" class="col-md-10 text-center"> <style>div.grid-col {\n			display: inline-block;\n			width: {{cellSize}}px;\n			height: {{cellSize}}px;\n		}\n		div.grid-row {\n			height: {{cellSize}}px;\n		}</style> <div class="grid-row" ng-repeat="row in grid.cells"> <div class="grid-col" ng-repeat="cell in row" ng-class="{\n                alive: cell.display.alive && cell.display.nextState\n                , dead: ! (cell.display.alive || cell.display.nextState )\n                , spawn: ! cell.display.alive && cell.display.nextState \n                , die: cell.display.alive && ! cell.display.nextState\n            }" ng-click="cellClick(cell)" style="text-decoration: {{cell.display.style}}">{{displayNeighbours ? cell.display.neighbours : ""}} </div> </div> </div> <div id="controls" class="col-md-2 text-center"> <div class="row form-group"> <h3>Pattern</h3> <button ng-click="random()">random</button> <button ng-click="blank()">blank</button> <button ng-click="gosper()">Gosper</button> </div> <div class="row form-group"> <h3>Evolution</h3> <p class="info">tick #{{life.numTicks}}</p> <button ng-click="stepBack()"> &lt <span class="info">{{life.historyStatus().back}} </span> </button> <button ng-click="startStop()">{{timer ? "&#9647" : "&#9655" }}</button> <button ng-click="stepForward()"> &gt </button> </div> <div class="row form-group"> <h3>Speed</h3> <input type="number" ng-change="speedChange()" ng-model="speed" min="1" max="30" required>ticks/sec </div> <div class="row form-group"> <h3>Size</h3> <p> <button ng-click="grid.removeRow()">-</button> {{life.grid.y}} Rows <button ng-click="grid.addRow()">+</button> </p> <p> <button ng-click="grid.removeCol()">-</button> {{life.grid.x}} Columns <button ng-click="grid.addCol()">+</button> </p> <p> Cell size <input type="number" ng-model="cellSize" min="5" max="50" required>px </p> </div> <div class="row form-group"> <input type="checkbox" ng-model="displayNeighbours"> Display number of neighbours </div> </div>')}]);